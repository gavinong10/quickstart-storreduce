Add access control to bucket and/or specify existing bucket
Specify AllowedPattern, MinLength, MaxLength for bucket name

"command" : "storreducectl server init --server-ip="127.0.0.1" --cluster-listen-port=8095 --etcd-client-port=2379 --etcd-peer-port=2380 --http-port=80 --https-port=443 --admin-port=8080 --shard-count=20 --replica-count=1 --force"


// What happens if the init commands fail? -> test that!

// Define PrivateIpAddress

// Make template referencing appropriate - currently testing out of gong-cf-templates

// Combine mappings into master?

https://gong-cf-templates.s3.amazonaws.com/templates/quickstart-storreduce-master.template
https://gong-cf-templates.s3.amazonaws.com/templates/quickstart-storreduce-vpc.template



	AWS::CloudFormation::Stack	kajsdflkasjdfkl-VPCStack-15YN6CRSQZZKW-Ec2Instance1-3OHIOH9AKXDN	Parameter validation failed: parameter type AWS::EC2::Subnet for parameter name LocalSubnet does not exist, parameter type AWS::EC2::VPC for parameter name VPC does not exist
    https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/templates/linux-bastion-master.template

Questions to ask:
- UserData vs AWS::CloudFormation::Init
- How do I get one server to complete a script in autoscaling followed by the rest
- How do I subtract from an input
- What do I need to understand about CF stack updates
- How do I disable rollback on failure?
- Is there any way I can 'continue' a deployment?
- Can I make the Init files reference the scripts folder?
- How do I pass a parameter into an init script?

"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "ip=$(curl --fail --silent http://169.254.169.254/latest/meta-data/public-ipv4 || curl --silent --fail http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                    "sudo storreducectl server init",
                    "        --admin_port=8080",
                    "        --cluster_listen_port=8095",
                    "        --config_server_client_port=2379",
                    "        --config_server_peer_port=2380",
                    "        --dev_n_shards=36",
                    "        --http_port=80",
                    "        --https_port=443",
                    "        --n_shard_replicas=2",
                    "        --force=true",
                    "        --cluster_listen_interface=${ip}\n",
                    "#TODO: Make dev_n_shards configurable\n",
                    "#TODO: Make n_shard_replicas configurable\n",
                    "#10.0.5.107\n"
                ]]}},